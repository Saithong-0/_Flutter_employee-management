const express = require('express');
const cors = require('cors');
const sql = require('mssql');
const bodyParser = require('body-parser');

const app = express();
const port = process.env.PORT || 3000;


app.use(cors());
app.use(bodyParser.json());


const dbConfig = {
  user: 'saithong',
  password: '123456',
  server: 'DESKTOP-3GCRNVU',
  database: 'Employee_Management',
  port: 1433,
  options: {
    encrypt: true,
    trustServerCertificate: true
  },
  pool: {
    max: 10,
    min: 0,
    idleTimeoutMillis: 30000
  }
};



// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
async function connectToDatabase() {
  try {
    await sql.connect(dbConfig);
    console.log('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  } catch (err) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', err);
  }
}
connectToDatabase();

// API Routes

// GET - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å
app.get('/api/employee', async (req, res) => {
  try {
    const { department, searchTerm } = req.query;

    let query = `
      SELECT 
        e.emp_id, e.emp_firstname, e.emp_lastname, e.emp_birth, e.emp_email,
        e.emp_photo, e.emp_date, e.emp_phone,
        d.dep_id, d.dep_title, d.dep_salary, d.dep_des
      FROM employee e
      LEFT JOIN department d ON e.dep_id = d.dep_id
      WHERE 1=1
    `;

    const request = new sql.Request();

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å
    if (department && department.toLowerCase() !== 'all') {
      query += ` AND e.dep_id = @dep_id`;
      request.input('dep_id', sql.VarChar(20), department);
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠
    if (searchTerm && searchTerm.trim() !== '') {
      query += ` AND (e.emp_firstname LIKE @search OR e.emp_lastname LIKE @search)`;
      request.input('search', sql.VarChar(100), `%${searchTerm}%`);
    }

    const result = await request.query(query);
    res.json(result.recordset);
  } catch (err) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:', err);
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ', details: err.message });
  }
});


// GET - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏° emp_id
app.get('/api/employee/:id', async (req, res) => {
  try {
    let { id } = req.params;

    if (!id || id.trim() === '') {
      return res.status(400).json({ error: 'emp_id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    id = id.trim(); 

    const request = new sql.Request();
    request.input('emp_id', sql.VarChar(20), id);

    console.log('üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ emp_id:', id);

    const query = `
      SELECT 
        e.emp_id, e.emp_firstname, e.emp_lastname, e.emp_birth, e.emp_email,
        e.emp_photo, e.emp_date, e.emp_phone,
        d.dep_id, d.dep_title, d.dep_salary, d.dep_des
      FROM employee e
      LEFT JOIN department d ON e.dep_id = d.dep_id
      WHERE RTRIM(LTRIM(e.emp_id)) = @emp_id
    `;

    const result = await request.query(query);

    if (result.recordset.length > 0) {
      res.json(result.recordset[0]);
    } else {
      res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' });
    }
  } catch (err) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏° ID:', err);
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ', details: err.message });
  }
});



// POST - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
app.post('/api/employee', async (req, res) => {
  try {
    const {
      emp_firstname, emp_lastname, emp_birth,
      emp_email, emp_photo, emp_date, emp_phone, dep_id
    } = req.body;

     if (dep_id) {
      const depRequest = new sql.Request();
      depRequest.input('dep_id', sql.VarChar(20), dep_id);
      const depCheck = await depRequest.query('SELECT dep_id FROM department WHERE dep_id = @dep_id');
      
      if (depCheck.recordset.length === 0) {
        return res.status(400).json({ error: '‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ú‡∏ô‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
      }
    }

    const request = new sql.Request();
    request.input('emp_firstname', sql.VarChar(50), emp_firstname);
    request.input('emp_lastname', sql.VarChar(50), emp_lastname);
    request.input('emp_birth', sql.Date, new Date(emp_birth));
    request.input('emp_email', sql.VarChar(50), emp_email);
    request.input('emp_photo', sql.VarChar(sql.MAX), emp_photo || ''); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô null
    request.input('emp_date', sql.Date, new Date(emp_date || new Date()));
    request.input('emp_phone', sql.VarChar(20), emp_phone);
    request.input('dep_id', sql.VarChar(20), dep_id);

    console.log('Executing sp_AddEmployee with params:', {
      emp_firstname, emp_lastname, emp_birth, emp_email,
      emp_date, emp_phone, dep_id
    });

    const result = await request.execute('sp_AddEmployee');
    
    console.log('SP result:', result);
    
    if (result.recordset && result.recordset.length > 0) {
      const newId = result.recordset[0].emp_id;
      console.log('New employee ID:', newId);
      res.status(201).json({ message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', emp_id: newId });
    } else {
      console.error('SP did not return expected data');
      res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ' });
    }
  } catch (err) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:', err);
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ', details: err.message });
  }
});

// PUT - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
app.put('/api/employee/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const {
      emp_firstname, emp_lastname, emp_birth,
      emp_email, emp_photo, emp_date, emp_phone, dep_id
    } = req.body;

    const request = new sql.Request();
    request.input('emp_id', sql.VarChar(20), id);
    request.input('emp_firstname', sql.VarChar(50), emp_firstname);
    request.input('emp_lastname', sql.VarChar(50), emp_lastname);
    request.input('emp_birth', sql.Date, new Date(emp_birth));
    request.input('emp_email', sql.VarChar(50), emp_email);
    request.input('emp_photo', sql.VarChar(sql.MAX), emp_photo || '');
    request.input('emp_date', sql.Date, new Date(emp_date));
    request.input('emp_phone', sql.VarChar(20), emp_phone);
    request.input('dep_id', sql.VarChar(20), dep_id);

    const query = `
      UPDATE employee
      SET emp_firstname = @emp_firstname,
          emp_lastname = @emp_lastname,
          emp_birth = @emp_birth,
          emp_email = @emp_email,
          emp_photo = @emp_photo,
          emp_date = @emp_date,
          emp_phone = @emp_phone,
          dep_id = @dep_id
      WHERE emp_id = @emp_id
    `;
    const result = await request.query(query);
    console.log('Rows affected:', result.rowsAffected);

    res.json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', emp_id: id });
  } catch (err) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:', err);
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ', details: err.message });
  }
});


// DELETE - ‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á emp_id ‡πÉ‡∏´‡∏°‡πà
app.delete('/api/employee/:id', async (req, res) => {
  try {
    const { id } = req.params;

    // ‡∏•‡∏ö‡∏Å‡πà‡∏≠‡∏ô
    const delRequest = new sql.Request();
    delRequest.input('emp_id', sql.VarChar(20), id);
    await delRequest.query('DELETE FROM employee WHERE emp_id = @emp_id');

    // ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà
    const reorderRequest = new sql.Request();
    await reorderRequest.execute('sp_ReorderEmpIds');

    res.json({ message: '‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á emp_id ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err);
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á emp_id ‡πÑ‡∏î‡πâ', details: err.message });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////

// GET - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get('/api/department', async (req, res) => {
  try {
    const query = `SELECT dep_id, dep_title, dep_salary, dep_des FROM department`;
    const result = await sql.query(query);
    res.json(result.recordset);
  } catch (err) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å:', err);
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡πÑ‡∏î‡πâ', details: err.message });
  }
});

// GET - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏ï‡∏≤‡∏° ID
app.get('/api/department/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const request = new sql.Request();
    request.input('dep_id', sql.VarChar(20), id);

    const query = `SELECT dep_id, dep_title, dep_salary, dep_des FROM department WHERE dep_id = @dep_id`;
    const result = await request.query(query);
    
    if (result.recordset.length > 0) {
      res.json(result.recordset[0]);
    } else {
      res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å' });
    }
  } catch (err) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏ï‡∏≤‡∏° ID:', err);
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡πÑ‡∏î‡πâ', details: err.message });
  }
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Server
app.listen(port, () => {
  console.log(`Server ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà port ${port}`);
});


